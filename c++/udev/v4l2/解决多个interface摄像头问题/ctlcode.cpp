// ctlcode.cpp : 定义控制台应用程序的入口点。
// IOCTL码解析工具

#include "stdafx.h"
#include <string>

struct NameMap
{
	uint32_t index;
	const char* name;
};

#define MACRONAME(m) #m

#define FILE_DEVICE_BEEP                0x00000001
#define FILE_DEVICE_CD_ROM              0x00000002
#define FILE_DEVICE_CD_ROM_FILE_SYSTEM  0x00000003
#define FILE_DEVICE_CONTROLLER          0x00000004
#define FILE_DEVICE_DATALINK            0x00000005
#define FILE_DEVICE_DFS                 0x00000006
#define FILE_DEVICE_DISK                0x00000007
#define FILE_DEVICE_DISK_FILE_SYSTEM    0x00000008
#define FILE_DEVICE_FILE_SYSTEM         0x00000009
#define FILE_DEVICE_INPORT_PORT         0x0000000a
#define FILE_DEVICE_KEYBOARD            0x0000000b
#define FILE_DEVICE_MAILSLOT            0x0000000c
#define FILE_DEVICE_MIDI_IN             0x0000000d
#define FILE_DEVICE_MIDI_OUT            0x0000000e
#define FILE_DEVICE_MOUSE               0x0000000f
#define FILE_DEVICE_MULTI_UNC_PROVIDER  0x00000010
#define FILE_DEVICE_NAMED_PIPE          0x00000011
#define FILE_DEVICE_NETWORK             0x00000012
#define FILE_DEVICE_NETWORK_BROWSER     0x00000013
#define FILE_DEVICE_NETWORK_FILE_SYSTEM 0x00000014
#define FILE_DEVICE_NULL                0x00000015
#define FILE_DEVICE_PARALLEL_PORT       0x00000016
#define FILE_DEVICE_PHYSICAL_NETCARD    0x00000017
#define FILE_DEVICE_PRINTER             0x00000018
#define FILE_DEVICE_SCANNER             0x00000019
#define FILE_DEVICE_SERIAL_MOUSE_PORT   0x0000001a
#define FILE_DEVICE_SERIAL_PORT         0x0000001b
#define FILE_DEVICE_SCREEN              0x0000001c
#define FILE_DEVICE_SOUND               0x0000001d
#define FILE_DEVICE_STREAMS             0x0000001e
#define FILE_DEVICE_TAPE                0x0000001f
#define FILE_DEVICE_TAPE_FILE_SYSTEM    0x00000020
#define FILE_DEVICE_TRANSPORT           0x00000021
#define FILE_DEVICE_UNKNOWN             0x00000022
#define FILE_DEVICE_VIDEO               0x00000023
#define FILE_DEVICE_VIRTUAL_DISK        0x00000024
#define FILE_DEVICE_WAVE_IN             0x00000025
#define FILE_DEVICE_WAVE_OUT            0x00000026
#define FILE_DEVICE_8042_PORT           0x00000027
#define FILE_DEVICE_NETWORK_REDIRECTOR  0x00000028
#define FILE_DEVICE_BATTERY             0x00000029
#define FILE_DEVICE_BUS_EXTENDER        0x0000002a
#define FILE_DEVICE_MODEM               0x0000002b
#define FILE_DEVICE_VDM                 0x0000002c
#define FILE_DEVICE_MASS_STORAGE        0x0000002d
#define FILE_DEVICE_SMB                 0x0000002e
#define FILE_DEVICE_KS                  0x0000002f
#define FILE_DEVICE_CHANGER             0x00000030
#define FILE_DEVICE_SMARTCARD           0x00000031
#define FILE_DEVICE_ACPI                0x00000032
#define FILE_DEVICE_DVD                 0x00000033
#define FILE_DEVICE_FULLSCREEN_VIDEO    0x00000034
#define FILE_DEVICE_DFS_FILE_SYSTEM     0x00000035
#define FILE_DEVICE_DFS_VOLUME          0x00000036
#define FILE_DEVICE_SERENUM             0x00000037
#define FILE_DEVICE_TERMSRV             0x00000038
#define FILE_DEVICE_KSEC                0x00000039
#define FILE_DEVICE_FIPS                0x0000003A
#define FILE_DEVICE_INFINIBAND          0x0000003B
#define FILE_DEVICE_VMBUS               0x0000003E
#define FILE_DEVICE_CRYPT_PROVIDER      0x0000003F
#define FILE_DEVICE_WPD                 0x00000040
#define FILE_DEVICE_BLUETOOTH           0x00000041
#define FILE_DEVICE_MT_COMPOSITE        0x00000042
#define FILE_DEVICE_MT_TRANSPORT        0x00000043
#define FILE_DEVICE_BIOMETRIC           0x00000044
#define FILE_DEVICE_PMI                 0x00000045
#define FILE_DEVICE_EHSTOR              0x00000046
#define FILE_DEVICE_DEVAPI              0x00000047
#define FILE_DEVICE_GPIO                0x00000048
#define FILE_DEVICE_USBEX               0x00000049
#define FILE_DEVICE_CONSOLE             0x00000050
#define FILE_DEVICE_NFP                 0x00000051
#define FILE_DEVICE_SYSENV              0x00000052
#define FILE_DEVICE_VIRTUAL_BLOCK       0x00000053
#define FILE_DEVICE_POINT_OF_SERVICE    0x00000054
#define FILE_DEVICE_STORAGE_REPLICATION 0x00000055
#define FILE_DEVICE_TRUST_ENV           0x00000056


#define METHOD_BUFFERED                 0
#define METHOD_IN_DIRECT                1
#define METHOD_OUT_DIRECT               2
#define METHOD_NEITHER                  3


#define FILE_ANY_ACCESS                 0
#define FILE_READ_ACCESS          ( 0x0001 )    // file & pipe
#define FILE_WRITE_ACCESS         ( 0x0002 )    // file & pipe

#define GENNAMEMAP(m) {m, #m}

NameMap g_file_name[] =
{
	GENNAMEMAP(FILE_ANY_ACCESS),
	GENNAMEMAP(FILE_READ_ACCESS),
	GENNAMEMAP(FILE_WRITE_ACCESS),
};

NameMap g_method_name[] =
{
	GENNAMEMAP(METHOD_BUFFERED),
	GENNAMEMAP(METHOD_IN_DIRECT),
	GENNAMEMAP(METHOD_OUT_DIRECT),
	GENNAMEMAP(METHOD_NEITHER),
};

NameMap g_device_type_name[] =
{
	GENNAMEMAP(FILE_DEVICE_BEEP),
	GENNAMEMAP(FILE_DEVICE_CD_ROM),
	GENNAMEMAP(FILE_DEVICE_CD_ROM_FILE_SYSTEM),
	GENNAMEMAP(FILE_DEVICE_CONTROLLER),
	GENNAMEMAP(FILE_DEVICE_DATALINK),
	GENNAMEMAP(FILE_DEVICE_DFS),
	GENNAMEMAP(FILE_DEVICE_DISK),
	GENNAMEMAP(FILE_DEVICE_DISK_FILE_SYSTEM),
	GENNAMEMAP(FILE_DEVICE_FILE_SYSTEM),
	GENNAMEMAP(FILE_DEVICE_INPORT_PORT),
	GENNAMEMAP(FILE_DEVICE_KEYBOARD),
	GENNAMEMAP(FILE_DEVICE_MAILSLOT),
	GENNAMEMAP(FILE_DEVICE_MIDI_IN),
	GENNAMEMAP(FILE_DEVICE_MIDI_OUT),
	GENNAMEMAP(FILE_DEVICE_MOUSE),
	GENNAMEMAP(FILE_DEVICE_MULTI_UNC_PROVIDER),
	GENNAMEMAP(FILE_DEVICE_NAMED_PIPE),
	GENNAMEMAP(FILE_DEVICE_NETWORK),
	GENNAMEMAP(FILE_DEVICE_NETWORK_BROWSER),
	GENNAMEMAP(FILE_DEVICE_NETWORK_FILE_SYSTEM),
	GENNAMEMAP(FILE_DEVICE_NULL),
	GENNAMEMAP(FILE_DEVICE_PARALLEL_PORT),
	GENNAMEMAP(FILE_DEVICE_PHYSICAL_NETCARD),
	GENNAMEMAP(FILE_DEVICE_PRINTER),
	GENNAMEMAP(FILE_DEVICE_SCANNER),
	GENNAMEMAP(FILE_DEVICE_SERIAL_MOUSE_PORT),
	GENNAMEMAP(FILE_DEVICE_SERIAL_PORT),
	GENNAMEMAP(FILE_DEVICE_SCREEN),
	GENNAMEMAP(FILE_DEVICE_SOUND),
	GENNAMEMAP(FILE_DEVICE_STREAMS),
	GENNAMEMAP(FILE_DEVICE_TAPE),
	GENNAMEMAP(FILE_DEVICE_TAPE_FILE_SYSTEM),
	GENNAMEMAP(FILE_DEVICE_TRANSPORT),
	GENNAMEMAP(FILE_DEVICE_UNKNOWN),
	GENNAMEMAP(FILE_DEVICE_VIDEO),
	GENNAMEMAP(FILE_DEVICE_VIRTUAL_DISK),
	GENNAMEMAP(FILE_DEVICE_WAVE_IN),
	GENNAMEMAP(FILE_DEVICE_WAVE_OUT),
	GENNAMEMAP(FILE_DEVICE_8042_PORT),
	GENNAMEMAP(FILE_DEVICE_NETWORK_REDIRECTOR),
	GENNAMEMAP(FILE_DEVICE_BATTERY),
	GENNAMEMAP(FILE_DEVICE_BUS_EXTENDER),
	GENNAMEMAP(FILE_DEVICE_MODEM),
	GENNAMEMAP(FILE_DEVICE_VDM),
	GENNAMEMAP(FILE_DEVICE_MASS_STORAGE),
	GENNAMEMAP(FILE_DEVICE_SMB),
	GENNAMEMAP(FILE_DEVICE_KS),
	GENNAMEMAP(FILE_DEVICE_CHANGER),
	GENNAMEMAP(FILE_DEVICE_SMARTCARD),
	GENNAMEMAP(FILE_DEVICE_ACPI),
	GENNAMEMAP(FILE_DEVICE_DVD),
	GENNAMEMAP(FILE_DEVICE_FULLSCREEN_VIDEO),
	GENNAMEMAP(FILE_DEVICE_DFS_FILE_SYSTEM),
	GENNAMEMAP(FILE_DEVICE_DFS_VOLUME),
	GENNAMEMAP(FILE_DEVICE_SERENUM),
	GENNAMEMAP(FILE_DEVICE_TERMSRV),
	GENNAMEMAP(FILE_DEVICE_KSEC),
	GENNAMEMAP(FILE_DEVICE_FIPS),
	GENNAMEMAP(FILE_DEVICE_INFINIBAND),
	GENNAMEMAP(FILE_DEVICE_VMBUS),
	GENNAMEMAP(FILE_DEVICE_CRYPT_PROVIDER),
	GENNAMEMAP(FILE_DEVICE_WPD),
	GENNAMEMAP(FILE_DEVICE_BLUETOOTH),
	GENNAMEMAP(FILE_DEVICE_MT_COMPOSITE),
	GENNAMEMAP(FILE_DEVICE_MT_TRANSPORT),
	GENNAMEMAP(FILE_DEVICE_BIOMETRIC),
	GENNAMEMAP(FILE_DEVICE_PMI),
	GENNAMEMAP(FILE_DEVICE_EHSTOR),
	GENNAMEMAP(FILE_DEVICE_DEVAPI),
	GENNAMEMAP(FILE_DEVICE_GPIO),
	GENNAMEMAP(FILE_DEVICE_USBEX),
	GENNAMEMAP(FILE_DEVICE_CONSOLE),
	GENNAMEMAP(FILE_DEVICE_NFP),
	GENNAMEMAP(FILE_DEVICE_SYSENV),
	GENNAMEMAP(FILE_DEVICE_VIRTUAL_BLOCK),
	GENNAMEMAP(FILE_DEVICE_POINT_OF_SERVICE),
	GENNAMEMAP(FILE_DEVICE_STORAGE_REPLICATION),
	GENNAMEMAP(FILE_DEVICE_TRUST_ENV),
};

const char* GetName(NameMap* m, unsigned int len, uint32_t t)
{
	for (unsigned int i = 0; i < len; ++i)
	{
		if (t == m[i].index)
		{
			return m[i].name;
		}
	}
	return "unknow";
}

int main(int args, char** argv)
{
	if (args != 2)
	{
		printf("use: ctlcode code\n");
		return -1;
	}
	std::string str = argv[1];
	bool use16 = false;
	if (str.size() >= 2)
	{
		if (str[0] == '0' && (str[1] == 'x' || str[1] == 'X'))
		{
			use16 = true;
		}
	}
	uint32_t code = strtoul(str.c_str(), nullptr, use16 ? 16 : 10);
	printf("origin code %s 0x%x(%d)\n", str.c_str(), code, code);
	printf("DeviceType : 0x%x name %s\n", code >> 16, GetName(g_device_type_name, _countof(g_device_type_name), code >> 16));
	printf("custom code: 0x%x(%d)\n", (code & 0x3fff) >> 2, (code & 0x3fff) >> 2);
	printf("Methodtype : 0x%x name %s\n", (code & 0x3), GetName(g_method_name, _countof(g_method_name), (code & 0x3)));
	printf("Accesstype : 0x%x name %s\n", (code & 0xffff) >> 14, GetName(g_file_name, _countof(g_file_name), (code & 0xffff) >> 14));
	printf("CTL_CODE(%s, 0x%x(%d), %s, %s)\n",
		GetName(g_device_type_name, _countof(g_device_type_name), code >> 16),
		(code & 0x3fff) >> 2, (code & 0x3fff) >> 2,
		GetName(g_method_name, _countof(g_method_name), (code & 0x3)),
		GetName(g_file_name, _countof(g_file_name), (code & 0xffff) >> 14));
    return 0;
}

